#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "markov_chain.h"
#include "linked_list.h"

#define FIRST_ARG 1
#define SECOND_ARG 2
#define THIRD_ARG 3
#define FOURTH_ARG 4
#define MAX_ARGS_NUM 5
#define MIN_ARGS_NUM 4
#define BASE_10 10
#define MAX_LENGTH 20
#define BUFFER_LENGTH 1000
#define WORD_LENGTH 100
#define READ_MODE "r"
#define ARGS_NUM_ERR "Usage: Args number should be 3 or 4 !"
#define PATH_ERR "Error: File path is unreachable !"

int open_file (FILE **f, const char *path, const char *mode)
{// Opening the file and return 0 if it's invalid .
  *f = fopen (path, mode);
  if (*f == NULL)
  {
    return 0;
  }
  return 1;
}

void close_file (FILE **f)
{// closing file function and make it equal to NULL .
  if (!*f)
  {
    return;
  }
  fclose (*f);
  *f = NULL;
}

void fill_database (FILE *fp, int words_to_read, MarkovChain *markov_chain)
{
  char data[BUFFER_LENGTH], *data_ptr = data;
  while (fgets (data, sizeof (data), fp) != NULL
         && words_to_read != 0)
  {
    data_ptr =data;
    char word[WORD_LENGTH];
    Node *before_node = NULL;
    while (sscanf (data_ptr, "%s ", word) == 1)
    {
      Node *node = add_to_database (markov_chain, word);
      if (!node)
      {
        markov_chain->error = true;
      }
      else if (before_node)
      {
        add_node_to_counter_list (before_node->data,
                                  node->data);
      }
      before_node = node;
      data_ptr += strlen (word);
      while (*data_ptr == ' ')
      {
        data_ptr++;
      }
      words_to_read--;
    }
  }
}

int convert_to_int (char *inp)
{
  return strtol (inp, NULL, BASE_10);
}

void sort_database (MarkovChain *markov_chain)
{
  Node *node = markov_chain->database->first, *current_node = NULL,
      *prev_node = NULL, *next_node = NULL;
  while (node != NULL)
  {
    current_node = node;
    next_node = current_node->next;
    while (next_node != NULL)
    {
      next_node = current_node->next;
      if (next_node == NULL)
      {
        if (markov_chain->database->last != current_node)
        {
          markov_chain->database->last = current_node;
        }
        return;
      }
      if (current_node->data->freq < next_node->data->freq)
      {
        if (prev_node == NULL)
        {
          markov_chain->database->first = next_node;
        }
        else
        {
          prev_node->next = next_node;
        }
        current_node->next = next_node->next;
        next_node->next = current_node;
      }
      prev_node = current_node;
      current_node = next_node;
      next_node = next_node->next;
    }
    node = node->next;
  }
}

static void print_tweets (MarkovChain *markov_chain, int num_tweets)
{
  for (int i = 0; i < num_tweets; ++i)
  {
    printf ("Tweet %d: ", i + 1);
    generate_random_sequence (markov_chain, get_first_random_node
        (markov_chain), MAX_LENGTH);
  }
}

int main (int argc, char *argv[])
{
  char *err_msg = NULL;
  unsigned int seed;
  int tweets, words_to_read;
  MarkovChain *words = NULL;

  if (argc > MAX_ARGS_NUM || argc < MIN_ARGS_NUM)
  {
    err_msg = ARGS_NUM_ERR;
  }
  else
  {
    seed = convert_to_int (argv[FIRST_ARG]);
    tweets = convert_to_int (argv[SECOND_ARG]);
    words_to_read = argc == MAX_ARGS_NUM ?
                    convert_to_int (argv[FOURTH_ARG]) : -1;
  }

  if (!err_msg)
  {
    words = malloc (sizeof (MarkovChain));
    if (!words)
    {
      err_msg = ALLOCATION_ERROR_MASSAGE;
    }
    else
    {
      words->database = malloc (sizeof (LinkedList));
      if (!words->database)
      {
        free (words);
        words = NULL;
        err_msg = ALLOCATION_ERROR_MASSAGE;
      }
      else
      {
        words->database->first = NULL;
        words->database->last = NULL;
        words->database->size = 0;
        words->error = false;
      }
    }
  }

  if (words)
  {
    FILE *txt_file;
    srand (seed);
    if (!open_file (&txt_file, argv[THIRD_ARG], READ_MODE))
    {
      err_msg = PATH_ERR;
    }
    fill_database (txt_file, words_to_read, words);
//      sort_database (words);
    close_file (&txt_file);
    if (words->error)
    {
      err_msg = ALLOCATION_ERROR_MASSAGE;
    }
    else
    {
      print_tweets (words, tweets);
    }

    free_markov_chain (&words);
  }
  if (!err_msg)
  {
    return EXIT_SUCCESS;
  }
  printf (err_msg);
  return EXIT_FAILURE;
}